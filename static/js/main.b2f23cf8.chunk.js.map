{"version":3,"sources":["logo.png","App.js","reportWebVitals.js","index.js"],"names":["web3Provider","Web3","providers","HttpProvider","process","web3","NetworkId","props","state","networkId","eth","net","getId","then","setState","p","this","React","Component","PeerCount","peerCount","getPeerCount","Stats","currentBlockNumber","transactionCount","timeTaken","tps","gasPrice","a","getGasPrice","getBlock","currentBlock","result","number","parentHash","previousBlock","timestamp","transactions","length","getEthStats","calculateStat","interval","setInterval","clearInterval","toFixed","createData","txHash","block","gasUsed","TransactionTable","rows","getBlockNumber","latestBlock","console","log","i","hash","blockTime","gas","push","variant","align","map","row","component","scope","App","maxW","centerContent","boxSize","objectFit","src","logo","alt","as","size","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2f23cf8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ae4c023.png\";","import React from 'react';\n\n// UI\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport {\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  TableCaption,\n  Image,\n  Container,\n  Heading,\n  Spacer,\n  Flex,\n  Box,\n} from \"@chakra-ui/react\"\n\n// Web3\nimport Web3 from 'web3';\n\n// Local\nimport logo from './logo.png';\nimport './App.css';\n\nconst provider = process.env.REACT_APP_BLOCKCHAIN_ENDPOINT;\nlet web3Provider = new Web3.providers.HttpProvider(provider);\nlet web3 = new Web3(web3Provider);\n\nfunction App() {\n  return (\n    <ChakraProvider>\n      <Container maxW=\"xl\" centerContent>\n        <Image\n          boxSize=\"100px\"\n          objectFit=\"cover\"\n          src={logo}\n          alt=\"logo\"\n        />\n        <Heading as=\"h1\" size=\"xl\">\n          Blockchain Explorer\n        </Heading>\n        <Flex>\n          <NetworkId />\n          <Spacer />\n          <PeerCount />\n        </Flex>\n        <Stats />\n      </Container>\n      <div className=\"App\">\n        <TransactionTable />\n      </div>\n    </ChakraProvider>\n  );\n}\n\nclass NetworkId extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { networkId: 0 };\n  }\n\n  componentDidMount() {\n    web3.eth.net.getId().then((networkId) => {\n      this.setState(() => ({ networkId: networkId }));\n    });\n  }\n\n  render() {\n    return (\n      <Box p=\"2\">\n        <span>Network ID: </span>\n        <span>{this.state.networkId}</span>\n      </Box>\n    );\n  }\n}\n\nclass PeerCount extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { peerCount: 0 };\n  }\n\n  componentDidMount() {\n    web3.eth.net.getPeerCount().then((peerCount) => {\n      this.setState(() => ({ peerCount: peerCount }));\n    });\n  }\n\n  render() {\n    return (\n      <Box p=\"2\">\n        <span>Peer Count: </span>\n        <span>{this.state.peerCount + 1}</span>\n      </Box>\n    );\n  }\n}\n\nclass Stats extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentBlockNumber: 0,\n      transactionCount: 0,\n      timeTaken: 0,\n      tps: 0,\n      gasPrice: 0,\n    };\n  }\n\n  async getEthStats() {\n    const gasPrice = await web3.eth.getGasPrice(); //average gas price\n    const currentBlock = await web3.eth.getBlock('latest');\n    let result = null;\n    if (currentBlock.number !== null) {\n      //only when block is mined not pending\n      const previousBlock = await web3.eth.getBlock(currentBlock.parentHash);\n      if (previousBlock.number !== null) {\n        const timeTaken = currentBlock.timestamp - previousBlock.timestamp;\n        const transactionCount = currentBlock.transactions.length;\n        const tps = transactionCount / timeTaken;\n        result = {\n          currentBlockNumber: currentBlock.number,\n          transactionCount,\n          timeTaken,\n          tps,\n          gasPrice,\n        };\n      }\n    }\n    return result;\n  }\n\n  async calculateStat() {\n    let result = await this.getEthStats();\n    this.setState(() => ({\n      currentBlockNumber: result.currentBlockNumber,\n      transactionCount: result.transactionCount,\n      timeTaken: result.timeTaken,\n      tps: result.tps,\n      gasPrice: result.gasPrice,\n    }));\n  }\n\n  componentDidMount() {\n    this.calculateStat();\n    this.interval = setInterval(() => this.calculateStat(), 10000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Current Block #{this.state.currentBlockNumber}</p>\n        <p>{this.state.transactionCount} transactions in {this.state.timeTaken} seconds at the rate of {this.state.tps.toFixed(2)} TPS</p>\n        <p>The average gas price is {this.state.gasPrice} wei.</p>\n      </div>\n    );\n  }\n}\n\nfunction createData(txHash, block, timestamp, gasUsed) {\n  return { txHash, block, timestamp, gasUsed };\n}\n\nclass TransactionTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { rows: [] };\n  }\n\n  componentDidMount() {\n    web3.eth.getBlockNumber().then((latestBlock) => {\n      console.log(latestBlock);\n      let rows = [];\n      for (let i = 0; i < 20; i++) {\n        web3.eth.getBlock(latestBlock - i).then((block) => {\n          const number = block.number;\n          const hash = block.hash;\n          const blockTime = block.timestamp;\n          const gas = block.gasUsed;\n          rows.push(createData(hash, number, blockTime, gas));\n          this.setState(() => ({ rows: rows }));\n        });\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Table variant=\"simple\">\n        <TableCaption>Latest 20 Blocks</TableCaption>\n        <Thead>\n          <Tr>\n            <Th>Transaction Hash</Th>\n            <Th align=\"right\">Block</Th>\n            <Th align=\"right\">Timestamp</Th>\n            <Th align=\"right\">Gas Used&nbsp;(wei)</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {this.state.rows.map((row) => (\n            <Tr key={row.txHash}>\n              <Td component=\"th\" scope=\"row\">\n                {row.txHash}\n              </Td>\n              <Td align=\"right\">{row.block}</Td>\n              <Td align=\"right\">{row.timestamp}</Td>\n              <Td align=\"right\">{row.gasUsed}</Td>\n            </Tr>\n          ))}\n        </Tbody>\n      </Table>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}